---
title: "Introduction to data visualization with R and ggplot2"
author: "Dr. Dominik Schmidt"
date: "`r Sys.Date()`"
date-format: "YYYY"
toc: true
toc-depth: 3
number-sections: false
highlight-style: tango
format: 
  html:
   embed-resources: true
   css: "./css/clean_qmd.css"
---
```{r echo=FALSE}

source("./src/custom.R")

```


# 003: Very basic plot types

## Cheatsheet 

- <https://rstudio.github.io/cheatsheets/html/data-visualization.html>




## Package installation

- Copy and paste the following code in the R-console to install necessary packages.


```{r message=FALSE}

if (!require("pacman")) install.packages("pacman")
  
pacman::p_load("data.table")
pacman::p_load("ggplot2")
pacman::p_load("rdwd")
pacman::p_load("ggforce")
pacman::p_load("skimr")
```


# Examples

## Histograms and distributions 

- Continuous (`numeric`,`integer`) or ordinal (`ordered factor`) input 

```{r}

# Counts per 'bin' 
ggplot(data=iris, aes(x=Sepal.Length))+
  geom_histogram()

ggplot(data=iris, aes(x=Sepal.Length))+
  geom_histogram(binwidth=0.1)

ggplot(data=iris, aes(x=Sepal.Length))+
  geom_histogram(binwidth=0.2
                , aes(fill=Species))

ggplot(data=iris, aes(x=Sepal.Length))+
  geom_histogram(binwidth=0.2
                , aes(fill=Species)
                , position="dodge")


# 'Smoothed Histogram' [Kernel density estimation]
ggplot(data=iris, aes(x=Sepal.Length,color=Species))+
  geom_density()

# Rotated + mirrored density
ggplot(data=iris, aes(x=Species,y=Sepal.Length))+
  geom_violin()


```



## Scatterplot + Count

- measurement precision of iris data set = 0.1 cm
- problem: overlapping observations in scatter plot
- `geom_count` does not *bin* data! Only exact overlaps are summed up.

```{r}

# original
ggplot(data=iris, aes(x=Petal.Length,y=Petal.Width))+
  geom_point()

# counts
ggplot(data=iris, aes(x=Petal.Length,y=Petal.Width))+
  geom_count()


```


## Boxplot *alternatives*

- more in 'Advanced boxplots' (optional topic)

```{r}
# original boxplot
ggplot(data=iris, aes(x=Species,y=Petal.Width))+
  geom_boxplot()

# Rotated density
ggplot(data=iris, aes(x=Species,y=Petal.Width))+
  geom_violin()

# 'semi-continuous' measurement 
sort(unique(iris$Petal.Width))
ggplot(data=iris, aes(x=Species,y=Petal.Width))+
  geom_count()

# or simply the data with some 'random' x-component
ggplot(data=iris, aes(x=Species,y=Petal.Width))+
  geom_jitter(height=0, width=0.25)


# a 'violin' by 'systematic jittering
ggplot(data=iris, aes(x=Species,y=Petal.Width))+
  ggforce::geom_sina(jitter_y=FALSE)
    
```



# Bar plot

- implicitly counts occurrences of discrete variables/factors

```{r}

ggplot(data=iris, aes(x=Species))+
  geom_bar()

# automatically detects characters as 'grouping'
ggplot(data=iris, aes(x=as.character(Species)))+
  geom_bar()


```


# Bar plot and dot plot

- for counts, but also for other summary statistics
- Dataset: USArrests - arrests per 100.000 residents

```{r}

USArrests <- as.data.table(USArrests,keep.rownames = TRUE)
colnames(USArrests)[1] = "State"

# bar plot
ggplot(USArrests,aes(x = State, y = Assault)) +
    geom_col() 

# dot plot
ggplot(USArrests,aes(x = State, y = Assault)) +
    geom_point()+
    scale_y_continuous(limits=c(0,NA)                       # include zero
                      ,expand = expansion(mult = c(0, .1))) # expand top    

# rotate bar
ggplot(USArrests,aes(y = State, x = Assault)) +
    geom_col()
 
# rotate dot 
ggplot(USArrests,aes(y = State, x = Assault)) +
    geom_point()+
    scale_x_continuous(limits=c(0,NA)                       # include zero
                      ,expand = expansion(mult = c(0, .1))) # expand right


# Reorder States 
# bar    
ggplot(USArrests,aes(y = reorder(x=State,X=Assault,FUN=max), x = Assault)) +
    geom_col()+
    scale_x_continuous(limits=c(0,NA)                       # include zero
                      ,expand = expansion(mult = c(0, .1))) # expand right 


# dot
ggplot(USArrests,aes(y = reorder(x=State,X=Assault,FUN=max), x = Assault)) +
    geom_point()+
    scale_x_continuous(limits=c(0,NA)                       # include zero
                      ,expand = expansion(mult = c(0, .1))) # expand right  

# lollipop
ggplot(USArrests,aes(y = reorder(x=State,X=Assault,FUN=max), x = Assault)) +
    geom_pointrange(aes(xmin=0,xmax=Assault))+
    scale_x_continuous(limits=c(0,NA)                       # include zero
                      ,expand = expansion(mult = c(0, .1))) # expand right  


```

# Time-series data

- ... or equivalents



```{r}

# load packages
# pacman::p_load("rdwd")
# to update to latest version
# updateRdwd()

##########################################################################################
# DO NOT EXECUTE CODE IN BINDER !
##########################################################################################
# # #Select data from the DWD CDC FTP Server
# # #set current=TRUE - to check current FTP Server Index to gather up-to-date file information
# link <- selectDWD("Geisenheim", res="daily", var="kl", per="recent", current=FALSE)
# #Download data from the DWD CDC FTP Server
# file <- dataDWD(link, read=FALSE, dir="DWDdata", quiet=TRUE, force=NA)
# #Process data from the DWD CDC FTP Server to a data.frame
# clim <- readDWD(file, varnames=TRUE, fread=TRUE)
# 
# # # Write out for students 
#  fwrite(clim[1:365,],"clim_DWD_Geisenheim_current.csv")
##########################################################################################
# Read file (for BINDER USERS)
##########################################################################################
clim <- fread("clim_DWD_Geisenheim_current.csv")
##########################################################################################

str(clim)
summary(clim)
skimr::skim(clim)

#MESS_DATUM  = Measurement Date
#TMK.Lufttemperatur = Daily Mean Air Temperature 2 m above ground 

# Time frame [first and last value of 'MESS_DATUM']
clim[c(1,nrow(clim)),"MESS_DATUM"]

# Scatterplot air temperature over time
ggplot(data=clim, aes(x=MESS_DATUM, y=TMK.Lufttemperatur))+
  geom_point()

# Line plot
ggplot(data=clim, aes(x=MESS_DATUM, y=TMK.Lufttemperatur))+
  geom_line()


# 'introduce' missing data 
nrow(clim)

ggplot(data=clim[-c(100:150),], aes(x=MESS_DATUM, y=TMK.Lufttemperatur))+
  geom_point()

# not do
ggplot(data=clim[-c(100:150),], aes(x=MESS_DATUM, y=TMK.Lufttemperatur))+
  geom_line()

# combine plots
ggplot(data=clim[-c(100:150),], aes(x=MESS_DATUM, y=TMK.Lufttemperatur))+
  geom_point()+
  geom_line()  


```


# High density scatterplots

- binning to account for overlaps
- no 'discrete' overlaps (no truncation of floating point numbers)

```{r}
set.seed(1) #fix random sampling with 'seed'
dRandom <- data.table( 
                        x=rnorm(n=1000,mean=0,sd=0.5),
                        y=rnorm(n=1000,mean=0,sd=0.5)
                      )
ggplot(dRandom, aes(x=x, y=y))+
  geom_point()

# binning
# hex (automatic)
ggplot(dRandom, aes(x=x, y=y))+
  geom_hex()

# box (automatic)
ggplot(dRandom, aes(x=x, y=y))+
  geom_bin2d()

# density (automatic)
ggplot(dRandom, aes(x=x, y=y))+
  geom_density_2d_filled()

# count (manual; round data)
ggplot(dRandom, aes(x=round(x,1), y=round(y,1)))+
  geom_count()

```



- see also <https://github.com/LKremer/ggpointdensity>




# Exercise

- Create different visualizations of the **distribution** of daily mean air temperature (`TMK.Lufttemperatur`) using density, histogram and frequency polygon plots (`?geom_freqpoly`; optional)
- Play around with their options (density: `adjust=`, histogram and frequency polygon: `binwidth=`)
- more options can be found in the help of the respective `?geom_...`

## More...

- "Simulator 1: The effect of sample size on normality tests and the precision of summary statistics"
  - "***How many data points do you need to determine the data distribution? A visual approach***"
  - <https://rtools.mayo.edu/size_matters>




# Additional resources

- <https://ggplot2.tidyverse.org/reference/scale_binned.html>
- <http://www.sthda.com/english/wiki/ggplot2-essentials>
- <https://bookdown.org/brry/rdwd/>

#  Session Info

```{r}

sessionInfo()

```
